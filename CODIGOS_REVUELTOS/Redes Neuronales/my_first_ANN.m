function [Y,Xf,Af] = my_first_ANN(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 20-May-2019 12:19:45.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx13 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx3 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [11.03;0.74;1.36;10.6;70;0.98;0.34;0.13;0.41;1.28;0.48;1.27;278];
x1_step1.gain = [0.526315789473684;0.395256916996047;1.06951871657754;0.103092783505155;0.0217391304347826;0.689655172413793;0.421940928270042;3.77358490566038;0.630914826498423;0.170648464163823;1.6260162601626;0.754716981132076;0.0014265335235378];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.5560292489689542;-0.19103696156453689;0.31225843791540703;-0.28438447658021715;0.4651289340944566;-0.61974678869981337;-1.6031857989174492];
IW1_1 = [0.68369300080678919 0.43267377355533226 -0.64448401130485311 -0.046103614516506998 0.47974849735176045 0.61224052473145307 0.45374956323996457 -0.33190902053803245 -0.394951267030897 0.59974189581440895 -0.23805293441517691 -0.12183163701332879 0.40231586396390273;-0.28085755254009326 -1.2661079569108598 0.010750866626166068 -0.82056928635127813 -0.35375874903825866 0.31185845161128928 0.9262217174987184 -0.21366109221978652 0.6640863815911372 -1.4742818267142705 0.15433347725819743 1.1157353038484785 -1.2607124970576833;0.34316264353296705 0.81741792919209599 1.3244083240193694 -0.2876596841315166 -0.014211336307160554 0.083072777933620154 -0.59899154189391979 -0.45960980028904763 -0.51711088272800754 0.37316677154378008 -0.085755137125557615 -0.28528477466410118 1.5377712769157363;-1.6185231301011844 -0.12251866917790491 -0.90975233585610693 0.8694335499167456 -0.4365248209150015 0.34322507851036205 0.44540521250091958 0.3031106007221942 0.44676674640394176 -0.95748113202125118 1.3439953389909554 -0.50446916698498567 -0.57405282221000054;1.1577727887637839 0.23202863640599242 0.95759829257094631 -0.8489972255981626 0.55399912643848048 0.88280957685393213 1.3180253281818515 -0.43373617541682852 -0.060340400584597567 -0.010349195019374431 0.42870663326906139 0.92667706710011966 1.6746049506876164;0.81989974281646749 -0.49565115348594502 -0.22731755198058173 -0.39434734559999585 0.055562088295581777 0.90502005475003977 0.55619799906023681 -0.077792091152106668 -0.78689395054801914 -0.043651983908668632 -0.55586763941885442 0.2821546071386325 1.5897681126783187;-0.018507914934852699 0.40048379583988036 -0.64885197277687967 -0.39752299170036509 0.54434809533263528 0.52992320077156108 0.28400068823105779 -0.43562241437939647 0.24019332323089243 0.62501486123608074 -0.36500851380094645 -0.39239830820467658 0.54918278170906842];

% Layer 2
b2 = [0.79864643715100703;-0.30115564462659594;-0.8926517209458894];
LW2_1 = [0.62455912493741272 0.72593134487205435 1.4196074242246224 -1.6696167479028696 2.8876703315917935 1.3250310079618535 0.59031094568519304;-0.32508292423602253 1.4838979296997992 -0.8769748839946826 1.2047682277036038 -1.1736087837971312 -0.71035510992171502 0.54930410304772725;-0.13739165493059952 -1.8386849867258663 1.4023131699825351 -1.3482618666648172 -1.2389321762422949 -0.24957051932492758 0.83276522155073662];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
else
    a = iSoftmaxApplyCPU(n);
end
end
function a = iSoftmaxApplyCPU(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numerator = exp(n);
denominator = sum(numerator,1);
denominator(denominator == 0) = 1;
a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
nmax = max(n,[],1);
numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
denominator = sum(numerator,1);
a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
if (denominator == 0)
    a = numerator;
else
    a = numerator ./ denominator;
end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
